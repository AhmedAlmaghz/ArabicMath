"use strict";const t={x:"س",y:"ص",z:"ع",w:"و",a:"أ",b:"ب",c:"ج",d:"د",f:"ق",g:"ج",h:"ح",n:"ن",t:"ت",u:"هـ",v:"خ",r:"ر"},e={sin:"جا",cos:"جتا",tan:"ظا",cot:"ظتا",sec:"قا",csc:"قتا",ln:"لو",log:"لو",exp:"هـ^",sqrt:"جذر",abs:"مطلق",max:"غا",min:"صغ",lim:"نها",sum:"مج",prod:"جد",int:"تك"},r={"→":"←","←":"→","⟹":"⟸","⟸":"⟹","↔":"↔","⟺":"⟺","∫":"∫","∬":"∬","∭":"∭","∮":"∮","∑":"∑","∏":"∏","≤":"≤","≥":"≥","≠":"≠","≈":"≈","≡":"≡","∈":"∈","∉":"∉","⊂":"⊂","⊃":"⊃","∪":"∪","∩":"∩","∅":"∅","∧":"∧","∨":"∨","¬":"¬","∀":"∀","∃":"∃"},s=[{name:"limit",pattern:/\\?lim|نها/i},{name:"integral",pattern:/\\?int|∫|تك/i},{name:"derivative",pattern:/d\s*\/\s*dx|\\?frac\{d/i},{name:"summation",pattern:/\\?sum|∑|مج/i},{name:"product",pattern:/\\?prod|∏|جد/i},{name:"matrix",pattern:/\\?begin\{.*matrix\}|مصفوفة/i}],n={0:"٠",1:"١",2:"٢",3:"٣",4:"٤",5:"٥",6:"٦",7:"٧",8:"٨",9:"٩"},i={MathSymbols:t,MathFunctions:e,MathOperations:r,CompoundPatterns:s,ArabicDigitsMap:n};!function(t,e){"object"==typeof module&&module.exports?module.exports=e():t.ArabicMathDictionaries=e()}("undefined"!=typeof self?self:this,function(){return i}),function(t,e){"object"==typeof module&&module.exports?module.exports=e(require("../dictionaries/symbols")):t.ArabicMathTranslator=e(t.ArabicMathDictionaries)}("undefined"!=typeof self?self:this,function(t){const e=function(t){try{return t&&t.default?t.default:t||{}}catch(t){return{}}}(t),r=e.MathSymbols||{},s=e.MathFunctions||{},n=e.MathOperations||{},i=e.ArabicDigitsMap||{};return class{constructor(t={}){this.options={translateNumbers:!1!==t.translateNumbers,translateFunctions:!1!==t.translateFunctions,translateVariables:!1!==t.translateVariables,flipArrows:!1!==t.flipArrows}}translate(t){if(!t||"string"!=typeof t)return"";let e=t;return this.options.translateFunctions&&(e=this.translateFunctions(e)),this.options.translateVariables&&(e=this.translateSymbols(e)),this.options.translateNumbers&&(e=this.translateNumbers(e)),this.options.flipArrows&&(e=this.flipArrows(e)),e}translateSymbols(t){const e=Object.keys(r).filter(t=>/[A-Za-z]+/.test(t)).sort((t,e)=>e.length-t.length);for(const s of e){const e=new RegExp(`\\b${this.escapeReg(s)}\\b`,"g");t=t.replace(e,r[s])}return t.replace(/[A-Za-z]/g,t=>r[t]||t)}translateFunctions(t){const e=Object.keys(s).sort((t,e)=>e.length-t.length);for(const r of e){const e=new RegExp(`\\b${this.escapeReg(r)}\\b`,"g");t=t.replace(e,s[r])}return t}translateNumbers(t){return t.replace(/\d/g,t=>i[t]||t)}flipArrows(t){const e=Object.keys(n).filter(t=>["→","←","⟹","⟸","↔","⟺"].includes(t));for(const r of e){const e=new RegExp(this.escapeReg(r),"g");t=t.replace(e,n[r])}return t}escapeReg(t){return t.replace(/[.*+?^${}()|[\]\\]/g,"\\$&")}}}),function(t,e){"object"==typeof module&&module.exports?module.exports=e():t.ArabicMathParser=e()}("undefined"!=typeof self?self:this,function(){return class{constructor(t={}){this.options=Object.assign({strict:!1},t)}parse(t){const e=String(t||"");return{type:"Equation",raw:e,issues:this._basicChecks(e)}}validate(t){const e=String(t||""),{errors:r,warnings:s}=this._basicChecks(e);return{valid:0===r.length,errors:r,warnings:s}}_basicChecks(t){const e=[],r=[],s={"(":")","{":"}","[":"]"},n=[];for(let r=0;r<t.length;r++){const i=t[r];if(s[i])n.push(i);else if(Object.values(s).includes(i)){const t=n.pop();if(!t||s[t]!==i){e.push(`Unbalanced bracket near index ${r}`);break}}}n.length&&e.push("Unbalanced brackets: missing closing");return(t.match(/\{/g)||[]).length!==(t.match(/\}/g)||[]).length&&e.push("Mismatched curly braces"),/\\invalid\b/.test(t)&&r.push("Contains unsupported command \\invalid"),{errors:e,warnings:r}}}}),function(t,e){"object"==typeof module&&module.exports?module.exports=e():t.ArabicMathRenderer=e()}("undefined"!=typeof self?self:this,function(){return class{constructor(t={}){this.options=Object.assign({displayMode:!0},t)}render(t,e){const r=e&&e.targetElement;if(!r)throw new Error("Renderer requires a target element");r.setAttribute("dir","rtl"),r.classList.add("arabic-math");const s=t&&t.raw?t.raw:"",n=e&&e.options&&e.options.mathRenderer||"none";if("mathjax"===n&&"undefined"!=typeof window&&window.MathJax)return r.innerHTML=s,"function"==typeof window.MathJax.typesetPromise?window.MathJax.typesetPromise([r]).catch(()=>{}):(window.MathJax.Hub&&window.MathJax.Hub.Queue&&window.MathJax.Hub.Queue(["Typeset",window.MathJax.Hub,r]),r);if("katex"===n&&"undefined"!=typeof window&&window.katex){try{window.katex.render(s,r,{displayMode:this.options.displayMode,throwOnError:!1})}catch(t){r.textContent=s}return r}return r.textContent=s,r}}}),function(t,e){"object"==typeof module&&module.exports?module.exports=e():t.ArabicMathRTL=e()}("undefined"!=typeof self?self:this,function(){const t=/[\u0600-\u06FF\u0750-\u077F]+/g;return{ensureRTL:e=>e?String(e).replace(t,t=>`‫${t}‬`):"",isRTLChar:t=>/[\u0600-\u06FF\u0750-\u077F]/.test(t||""),normalizeMixed:e=>e?String(e).replace(/[\u202A-\u202E\u2066-\u2069]/g,"").replace(t,t=>`‫${t}‬`):"",applyToElement(t){t&&(t.setAttribute("dir","rtl"),t.classList.add("arabic-math"),t.style.unicodeBidi="isolate-override",t.style.direction="rtl")}}}),function(t,e){"object"==typeof module&&module.exports?module.exports=e(require("./core/translator"),require("./core/parser"),require("./core/renderer"),require("./utils/rtl-handler"),require("./dictionaries/symbols")):t.ArabicMath=e(t.ArabicMathTranslator,t.ArabicMathParser,t.ArabicMathRenderer,t.ArabicMathRTL,t.ArabicMathDictionaries)}("undefined"!=typeof self?self:this,function(t,e,r,s,n){const i="0.1.0";return class{constructor(s={}){this.options=Object.assign({rtl:!0,autoTranslate:!0,mathRenderer:"none",defaultTarget:null},s),this.translator=new t(s.translate||{}),this.parser=new e(s.parser||{}),this.renderer=new r(s.renderer||{}),this._listeners=new Map}setOptions(t={}){this.options=Object.assign({},this.options,t),this.emit("options:change",this.options)}translate(t){const e=String(t||""),r=this.translator.translate(e);return this.options.rtl?s.ensureRTL(r):r}validateEquation(t){return this.parser.validate(t)}render(t,e,r={}){const s=Object.assign({},this.options,r),n=this._resolveTarget(t||this.options.defaultTarget);if(!n)throw new Error("Target element not found");let a=String(e||"");s.autoTranslate&&(a=this.translate(a));const o=this.parser.parse(a),l={targetElement:n,options:s,version:i};return this.emit("before:render",{equation:a,context:l}),this.renderer.render(o,l),this.emit("after:render",{equation:a,context:l}),n}on(t,e){return this._listeners.has(t)||this._listeners.set(t,new Set),this._listeners.get(t).add(e),()=>this.off(t,e)}off(t,e){this._listeners.has(t)&&this._listeners.get(t).delete(e)}emit(t,e){this._listeners.has(t)&&this._listeners.get(t).forEach(t=>{try{t(e)}catch(t){}})}_resolveTarget(t){return t?"string"==typeof t?document.querySelector(t):t&&1===t.nodeType?t:null:null}static get version(){return i}get version(){return i}static get dictionaries(){return n}}});